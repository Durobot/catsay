First run of the version using structopt library:

cargo run -- Hello!
    Updating crates.io index
  Downloaded atty v0.2.14
  Downloaded quote v1.0.9
  Downloaded proc-macro2 v1.0.27
  Downloaded unicode-segmentation v1.7.1
  Downloaded unicode-width v0.1.8
  Downloaded unicode-xid v0.2.2
  Downloaded version_check v0.9.3
  Downloaded vec_map v0.8.2
  Downloaded structopt v0.3.21
  Downloaded structopt-derive v0.4.14
  Downloaded proc-macro-error v1.0.4
  Downloaded proc-macro-error-attr v1.0.4
  Downloaded heck v0.3.2
  Downloaded libc v0.2.95
  Downloaded syn v1.0.72
  Downloaded clap v2.33.3
  Downloaded 16 crates (1.3 MB) in 0.99s
   Compiling proc-macro2 v1.0.27
   Compiling version_check v0.9.3
   Compiling unicode-xid v0.2.2
   Compiling syn v1.0.72
   Compiling libc v0.2.95
   Compiling bitflags v1.2.1
   Compiling unicode-segmentation v1.7.1
   Compiling unicode-width v0.1.8
   Compiling vec_map v0.8.2
   Compiling ansi_term v0.11.0
   Compiling strsim v0.8.0
   Compiling lazy_static v1.4.0
   Compiling textwrap v0.11.0
   Compiling heck v0.3.2
   Compiling proc-macro-error-attr v1.0.4
   Compiling proc-macro-error v1.0.4
   Compiling quote v1.0.9
   Compiling atty v0.2.14
   Compiling clap v2.33.3
   Compiling structopt-derive v0.4.14
   Compiling structopt v0.3.21
   Compiling catsay v0.1.0 (/home/kyron5/projects/rust-sandbox/catsay)
    Finished dev [unoptimized + debuginfo] target(s) in 16.55s
     Running `target/debug/catsay 'Hello'\!''`
Hello!
 \
  \
   /\_/\
  ( o o )
  =( I )=

-------------------------------------------------------------

Results of using
fn main() -> Result<(), Box<dyn std::error::Error>>
  and
let cat_template = std::fs::read_to_string(path)?;
  and
Ok(())
with bad file path argument:

cargo run -- -f file_doesnt_exist.txt Ohai!
    Finished dev [unoptimized + debuginfo] target(s) in 0.01s
     Running `target/debug/catsay -f file_doesnt_exist.txt 'Ohai'\!''`
Ohai!
Error: Os { code: 2, kind: NotFound, message: "No such file or directory" }

-------------------------------------------------------------

First run of "cargo test", without adding any new dependencies,
with the newly created integration_test.rs file, that includes the
following two use statements:
use std::process::Command; // Run programs
use assert_cmd::prelude::*; // Add methods on commands

~/projects/rust-sandbox/catsay$ cargo test
    Updating crates.io index
  Downloaded memchr v2.4.0
  Downloaded wait-timeout v0.2.0
  Downloaded predicates-core v1.0.2
  Downloaded predicates v1.0.8
  Downloaded regex-automata v0.1.10
  Downloaded predicates-tree v1.0.2
  Downloaded doc-comment v0.3.3
  Downloaded bstr v0.2.16
  Downloaded assert_cmd v1.0.5
  Downloaded 9 crates (593.0 KB) in 0.77s
   Compiling libc v0.2.95
   Compiling memchr v2.4.0
   Compiling doc-comment v0.3.3
   Compiling predicates-core v1.0.2
   Compiling difference v2.0.0
   Compiling regex-automata v0.1.10
   Compiling treeline v0.1.0
   Compiling predicates-tree v1.0.2
   Compiling predicates v1.0.8
   Compiling bstr v0.2.16
   Compiling atty v0.2.14
   Compiling wait-timeout v0.2.0
   Compiling clap v2.33.3
   Compiling colored v2.0.0
   Compiling assert_cmd v1.0.5
   Compiling structopt v0.3.21
   Compiling catsay v0.1.0 (/home/kyron5/projects/rust-sandbox/catsay)
    Finished test [unoptimized + debuginfo] target(s) in 10.10s
     Running unittests (target/debug/deps/catsay-64b705e17a0dd3d0)

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

     Running tests/integration_test.rs (target/debug/deps/integration_test-255d5a72efe64570)

running 1 test
test run_with_defaults ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s
